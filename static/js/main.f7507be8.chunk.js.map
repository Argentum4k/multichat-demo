{"version":3,"sources":["hooks/useSocket.js","components/PopupRoomInfo.js","components/Home.js","components/Login.js","App.js","index.js"],"names":["socket","io","autoConnect","useSocket","u","a","useState","user","setUser","users","setUsers","rooms","setRooms","chat","setChat","userTyping","setUserTyping","typingTimer","setTypingTimer","useEffect","sessionId","sessionStorage","getItem","auth","connect","console","log","on","emit","username","avatar","userId","setItem","sUser","sUsers","sRooms","roomId","prevUser","message","prevchat","room","messages","unread","type","disconnect","logIn","logOut","removeItem","sendMessage","createRoom","roomName","updateRoom","deleteRoom","typing","clearTimeout","stoppedTyping","setTimeout","logStates","showUser","showUsers","showRooms","showChat","style","borderRadius","padding","boxShadow","border","PopupRoomInfo","members","setMembers","m","filter","id","Popup","trigger","className","fontWeight","color","length","join","Home","client","setRoomName","setMessage","showEmoji","setShowEmoji","chatBottomRef","useRef","emojiSelector","scrollToBottom","current","scrollIntoView","behavior","onClick","e","contains","target","handleAppClick","src","alt","alignSelf","map","msg","idx","content","ref","marginLeft","position","el","onKeyUp","keyCode","handleEmojiKeyUp","bottom","left","onSelect","emoji","native","prevMessage","emojiSize","marginRight","prevState","value","placeholder","onChange","handleKeyUp","name","margin","handleKeyUpRoom","avatars","Login","setUsername","setAvatar","avt","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f7507be8.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport io from 'socket.io-client';\r\n\r\nconst socket = io(\"http://localhost:4000\", { autoConnect: false });\r\n\r\nconst useSocket = () => {\r\n\r\n    let u, a;\r\n    const [user, setUser] = useState();\r\n    const [users, setUsers] = useState();\r\n    const [rooms, setRooms] = useState();\r\n    const [chat, setChat] = useState({});\r\n\r\n    const [userTyping, setUserTyping] = useState();\r\n    const [typingTimer, setTypingTimer] = useState();\r\n\r\n\r\n    useEffect(() => {\r\n        \r\n        // get session and connect with session as auth\r\n        const sessionId = sessionStorage.getItem(\"sessionId\");\r\n        if (sessionId) {\r\n            socket.auth = { sessionId };\r\n            socket.connect();\r\n            console.log(\"Trying to reconnect with sessionId\");\r\n        }\r\n\r\n\r\n        socket.on(\"connect\", () => {\r\n            console.log(\"Connected to server successfully\");\r\n            \r\n            if (!sessionId)\r\n                socket.emit(\"user\", { username: u, avatar: a });\r\n\r\n            socket.emit(\"setUpUser\");\r\n        });\r\n\r\n\r\n        socket.on(\"session\", ({ sessionId, userId }) => {\r\n            socket.auth = { sessionId };\r\n            sessionStorage.setItem(\"sessionId\", sessionId);\r\n            socket.userId = userId;\r\n        });\r\n\r\n\r\n        socket.on(\"user\", (sUser) => {\r\n            setUser(sUser);\r\n        });\r\n\r\n\r\n        socket.on(\"users\", (sUsers) => {\r\n            setUsers(sUsers);\r\n        });\r\n\r\n\r\n        socket.on(\"rooms\", (sRooms) => {\r\n            setRooms(sRooms);\r\n        });\r\n\r\n\r\n        socket.on(\"room\", (roomId) => {\r\n            setUser(prevUser =>  ({...prevUser, roomId: roomId}));\r\n        });\r\n\r\n\r\n        socket.on(\"chat\", (message) => {\r\n            setChat(prevchat => ({\r\n                ...prevchat, \r\n                [message.room]: {\r\n                    messages: [...prevchat[message.room]?.messages || [], message],\r\n                    unread: (prevchat[message.room]?.unread || 0) + (message.type === \"message\" ? 1 : 0)\r\n                    }\r\n                })\r\n            );\r\n        });\r\n\r\n\r\n        socket.on(\"typing\", (username) => {\r\n            setUserTyping(username);\r\n        });\r\n\r\n\r\n        socket.on(\"stoppedTyping\", () => {\r\n            setUserTyping(null);\r\n        });\r\n\r\n\r\n        return () => {\r\n            console.log(\"Disconnected from server\");\r\n            socket.disconnect();\r\n        }\r\n\r\n    }, []);\r\n\r\n \r\n\r\n    const logIn = ({ username, avatar }) => {\r\n        u = username;\r\n        a = avatar;\r\n        socket.auth = { username };\r\n        socket.connect();\r\n    }\r\n\r\n\r\n    const logOut = () => {\r\n        setUser(null);\r\n        sessionStorage.removeItem(\"sessionId\");\r\n        socket.disconnect();\r\n        console.log(\"User logged out\");\r\n    }\r\n\r\n\r\n    const sendMessage = (message) => {\r\n        socket.emit(\"message\", message);\r\n    }\r\n\r\n\r\n    const createRoom = (roomName) => {\r\n        console.log(\"emit createRoom\");\r\n        socket.emit(\"createRoom\", roomName);\r\n    }\r\n\r\n\r\n    const updateRoom = (roomId) => {\r\n        \r\n        socket.emit(\"updateRoom\", roomId);\r\n\r\n        setChat(prevchat => ({\r\n                ...prevchat, \r\n                [user.roomId]: {\r\n                    ...prevchat[user.roomId],\r\n                    unread: 0\r\n                },\r\n                [roomId]: {\r\n                    ...prevchat[roomId],\r\n                    unread: 0\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n\r\n    const deleteRoom = (roomId) => {\r\n        socket.emit(\"deleteRoom\", roomId);\r\n    }\r\n\r\n\r\n    const typing = () => {\r\n        socket.emit(\"typing\");\r\n        clearTimeout(typingTimer);\r\n        setTypingTimer(null);\r\n    }\r\n\r\n\r\n    const stoppedTyping = () => {\r\n        if (typingTimer == null) {\r\n            setTypingTimer(setTimeout(() => {\r\n                socket.emit(\"stoppedTyping\");\r\n            }, 300));\r\n        }\r\n    }\r\n\r\n\r\n    const logStates = ({ showUser=false, showUsers=false, showRooms=false, showChat=false }) => {\r\n        if (showUser) console.log(user);\r\n        if (showUsers) console.log(users);\r\n        if (showRooms) console.log(rooms);\r\n        if (showChat) console.log(chat);\r\n    }\r\n\r\n\r\n    return { \r\n        socket, \r\n        user, \r\n        users, \r\n        chat,\r\n        setChat,\r\n        rooms, \r\n        logIn, \r\n        logOut, \r\n        sendMessage, \r\n        createRoom, \r\n        updateRoom, \r\n        deleteRoom, \r\n        typing,\r\n        stoppedTyping,\r\n        userTyping,\r\n        logStates \r\n    };\r\n\r\n}\r\n\r\nexport default useSocket;","import React, { useEffect, useState } from 'react'\r\nimport { Popup } from 'semantic-ui-react'\r\n\r\nconst style = {\r\n  borderRadius: 10,\r\n  padding: '1em',\r\n  boxShadow: \"0px 10px 10px rgba(113, 113, 113, 0.1)\",\r\n  border: 0,\r\n}\r\n\r\nconst PopupRoomInfo = ({ roomId, rooms }) => {\r\n\r\n    const [members, setMembers] = useState([]);\r\n\r\n    useEffect(() => {\r\n\r\n        const m = rooms?.filter(room => room.id === roomId)[0]?.members;\r\n        setMembers(m);\r\n        \r\n    }, [roomId, rooms]);\r\n\r\n    return (\r\n        <Popup\r\n            trigger={<div className=\"chat_info\">i</div>}\r\n            style={style} >\r\n        \r\n            <p style={{ fontWeight: '600' }}>Users: <span style={{ color: \"#1ecdc5\" }}>{members?.length}</span></p>\r\n            <p>{members?.join(\", \")}</p>\r\n\r\n        </Popup>\r\n    );\r\n\r\n}\r\n  \r\n\r\n\r\nexport default PopupRoomInfo","import React, { useState, useEffect, useRef } from 'react';\r\n\r\nimport PopupRoomInfo from './PopupRoomInfo';\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport { Picker } from 'emoji-mart';\r\n\r\nconst Home = ({ client: { user, logOut, users, chat, rooms, createRoom, updateRoom, deleteRoom, sendMessage, typing, userTyping, stoppedTyping } }) => {\r\n\r\n    const [roomName, setRoomName] = useState(\"\");\r\n    const [message, setMessage] = useState(\"\");\r\n    const [showEmoji, setShowEmoji] = useState(false);\r\n\r\n    const chatBottomRef = useRef(null);\r\n    const emojiSelector = useRef();\r\n\r\n    const scrollToBottom = () => {\r\n        chatBottomRef.current?.scrollIntoView({ behavior: \"smooth\" })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        scrollToBottom();\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        \r\n        scrollToBottom();\r\n\r\n    }, [chat, user.roomId]);\r\n\r\n\r\n    // keyup for message input\r\n    const handleKeyUp = (e, message) => {\r\n        if (e.keyCode === 13) {\r\n            sendMessage(message);\r\n            setMessage(\"\");\r\n            setShowEmoji(false);\r\n        }\r\n    }\r\n\r\n    const handleEmojiKeyUp = (e) => {\r\n        if (e.keyCode === 13) {\r\n            sendMessage(message);\r\n            setMessage(\"\");\r\n            setShowEmoji(false);\r\n        }\r\n    }\r\n\r\n\r\n    const handleMessageChange = (e) => {\r\n        setMessage(e.target.value); \r\n        typing();\r\n    }\r\n\r\n\r\n    const addEmoji = e => {\r\n        let emoji = e.native;\r\n        setMessage(prevMessage => prevMessage + emoji);\r\n    };\r\n\r\n\r\n    // keyup for room input\r\n    const handleKeyUpRoom = (e) => {\r\n        if (e.keyCode === 13) {\r\n            createRoom(e.target.value); \r\n            setRoomName(\"\")\r\n        }\r\n    }\r\n\r\n\r\n    const handleAppClick = (e) => {\r\n        if (showEmoji && !emojiSelector.current.contains(e.target)) {\r\n            setShowEmoji(false); \r\n        }\r\n    }\r\n\r\n\r\n    const handleMessageSubmit = () => {\r\n        sendMessage(message); \r\n        setMessage(\"\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"chat_app\" onClick={(e) => handleAppClick(e)}>\r\n            <div className=\"left_sidebar\">\r\n                \r\n                <div className=\"logo_text\">\r\n                    <span>Chit</span> <span className=\"colored\">Chat</span>\r\n                </div>\r\n\r\n                <div className=\"profile_info\">\r\n                    <img src={user.avatar} className=\"avatar_profile\" alt=\"\" />\r\n                    <span>{user.username}</span>\r\n                    <p onClick={() => logOut()}>Logout</p>\r\n                </div>\r\n            \r\n                <span style={{ alignSelf: 'flex-start', fontWeight: '600' }}>Users</span>\r\n                <div className=\"active_users_list\">\r\n                    {\r\n                        users?.length > 1 ? \r\n                            users?.map(u => {\r\n                                if (u.userId !== user.userId) {\r\n                                    return (\r\n                                        <div className=\"user_card\" key={u.userId}>\r\n                                            <img src={u.avatar} className=\"small_img\" alt=\"\" />\r\n                                            <span>{u.username}</span>\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                                else return null;\r\n                            })\r\n                        :\r\n\r\n                        <div className=\"announcement\">\r\n                            <span>No users online</span>\r\n                        </div>\r\n                    }\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n            <div className=\"chat_area\">\r\n                \r\n                <div className=\"chat_bg\">\r\n                    \r\n                    <PopupRoomInfo roomId={user.roomId} rooms={rooms} />\r\n\r\n                    <div className=\"chat\">\r\n                        {\r\n                            chat && chat[user.roomId]?.messages?.map((msg, idx) => {\r\n                                if (msg.type === \"info\") {\r\n                                    return (\r\n                                        <div className=\"announcement\" key={idx}>\r\n                                            <span>{msg.content}</span>\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                                else {\r\n                                    return (\r\n                                        <div className={msg.userId === user.userId ? \"message_holder me\" : \"message_holder\"} key={idx}>\r\n                                            <img src={msg.avatar} className=\"small_img\" alt=\"\" />\r\n                                            <div className=\"message_box\">\r\n                                                <div className=\"message\">\r\n                                                    <span className=\"message_name\">{msg.username}</span>\r\n                                                    <span className=\"message_text\">{msg.content}</span>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                            })\r\n                        }\r\n\r\n                        {/* Bottom div ref for auto scroll */}\r\n                        <div ref={chatBottomRef} />\r\n\r\n                    </div>\r\n\r\n                    <div style={{ marginLeft: 15, color: \"#f48235\" }}><i>{(userTyping && userTyping !== user.username) && `Typing ${userTyping}`}</i></div>\r\n                    \r\n\r\n                    <div className=\"chat_input\" style={{ position: 'relative' }}>\r\n\r\n                        { showEmoji && \r\n                            (<span \r\n                                ref={el => emojiSelector.current = el} \r\n                                onKeyUp={(e) => handleEmojiKeyUp(e)}\r\n                                style={{ position: 'absolute', bottom: 60, left: 0}}>\r\n                                <Picker onSelect={addEmoji} emojiSize={20} />\r\n                            </span>)\r\n                        }\r\n                        \r\n                        <i className=\"far fa-smile-wink\" style={{ marginRight: 8, color: \"grey\" }} onClick={() => setShowEmoji(prevState => !prevState)}></i>\r\n\r\n                        <input \r\n                            type=\"text\" \r\n                            value={message} \r\n                            placeholder=\"Enter message\" \r\n                            onChange={handleMessageChange}\r\n                            onKeyUp={(e) => {handleKeyUp(e, message); stoppedTyping();}} />\r\n                        \r\n                        <button className=\"send_message_btn\" onClick={(e) => {handleMessageSubmit();}}>SEND</button>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n            <div className=\"right_sidebar\">\r\n                \r\n                <span style={{ alignSelf: 'flex-start', fontWeight: '600' }}>Rooms</span>\r\n                <div className=\"active_rooms_list\">\r\n                    {\r\n                        rooms?.map(room => (\r\n                            <div \r\n                                className={room.id === user.roomId ? \"room_card active_item\" : \"room_card\"} \r\n                                key={room.id} \r\n                                onClick={() => updateRoom(room.id) } >\r\n                                \r\n                                <div className=\"room_item_content\">\r\n                                    <img src={room.avatar} className=\"small_img\" alt=\"\" />\r\n                                    <div className=\"roomInfo\">\r\n                                        <span>{room.name}</span>\r\n                                        <span className=\"room_author\">{room.username}</span>\r\n                                    </div>\r\n                                </div>\r\n                                \r\n                                <div className=\"room_item_controls\">\r\n                                    { room.userId === user.userId && \r\n                                        <div onClick={() => deleteRoom(room.id)} style={{ margin: 3 }}>\r\n                                            <i className=\"far fa-trash-alt\" style={{ color: \"grey\" }} />\r\n                                        </div>\r\n                                    }\r\n                                    { (chat[room.id]?.unread > 0 && room.id !== user.roomId) && <div className=\"badge\">{chat[room.id]?.unread}</div>}\r\n                                </div>\r\n\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n\r\n                <div className=\"room_input\">\r\n                    <input type=\"text\" value={roomName} placeholder=\"Create room\" onChange={(e) => setRoomName(e.target.value)} onKeyUp={(e) => handleKeyUpRoom(e)} />\r\n                    <span className=\"room_add_icon_holder\" onClick={() => {createRoom(roomName); setRoomName(\"\")}}>\r\n                        {/* <i class=\"plus icon\"></i> */}\r\n                        +\r\n                    </span>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Home;","import React, { useState } from 'react';\r\n\r\nconst avatars = [\r\n    \"https://semantic-ui.com/images/avatar2/small/patrick.png\",\r\n    \"https://semantic-ui.com/images/avatar2/small/kristy.png\",\r\n    \"https://semantic-ui.com/images/avatar2/small/mark.png\",\r\n    \"https://semantic-ui.com/images/avatar2/small/matthew.png\",\r\n    \"https://semantic-ui.com/images/avatar2/small/elyse.png\",\r\n    \"https://semantic-ui.com/images/avatar2/small/lindsay.png\",\r\n];\r\n\r\n// const avatars = [\r\n//     {\r\n//         id: 1,\r\n//         url: \"https://semantic-ui.com/images/avatar2/small/patrick.png\",\r\n//     },\r\n//     {\r\n//         id: 2,\r\n//         url: \"https://semantic-ui.com/images/avatar2/small/kristy.png\",\r\n//     },\r\n//     {\r\n//         id: 3,\r\n//         url: \"https://semantic-ui.com/images/avatar2/small/mark.png\",\r\n//     },\r\n//     {\r\n//         id: 4,\r\n//         url: \"https://semantic-ui.com/images/avatar2/small/matthew.png\",\r\n//     },\r\n//     {\r\n//         id: 5,\r\n//         url: \"https://semantic-ui.com/images/avatar2/small/elyse.png\",\r\n//     },\r\n//     {\r\n//         id: 6,\r\n//         url: \"https://semantic-ui.com/images/avatar2/small/lindsay.png\",\r\n//     },\r\n// ];\r\n\r\n\r\nfunction Login({ logIn }) {\r\n\r\n    const [username, setUsername] = useState(\"\");\r\n    const [avatar, setAvatar] = useState(\"https://semantic-ui.com/images/avatar2/small/patrick.png\");\r\n\r\n    return (\r\n        <div className=\"chat_login\">\r\n            \r\n            <div className=\"logo_text\">\r\n                <span>Chit</span> <span className=\"colored\">Chat</span>\r\n            </div>\r\n\r\n            <div className=\"avatar_list\">  \r\n                {\r\n                    avatars.map((avt, idx) => (\r\n                        <div className={avatar === avt ? \"avatar active_avatar\" : \"avatar\"} key={idx}>\r\n                            <img \r\n                                src={avt} \r\n                                className=\"avatar_image\" \r\n                                alt=\"\"\r\n                                onClick={() => setAvatar(avt)} />\r\n                        </div>\r\n                    ))\r\n                }\r\n\r\n            </div>\r\n\r\n            <div className=\"username_input_holder\">\r\n                <input type=\"text\" value={username} placeholder=\"Enter Name\" className=\"username_input\" onChange={(e) => setUsername(e.target.value)} />\r\n            </div>\r\n\r\n            <div className=\"btn_holder\">\r\n                <button className=\"enter_chat_btn\" onClick={() => logIn({ username, avatar })}>ENTER CHAT</button>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport './App.css';\r\nimport useSocket from './hooks/useSocket';\r\nimport Home from './components/Home';\r\nimport Login from './components/Login';\r\n\r\n\r\nconst App = () => {\r\n\r\n    const client = useSocket();\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            { client.user ? <Home client={client} /> : <Login logIn={client.logIn} />}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}